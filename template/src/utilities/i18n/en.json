{
  "Error": "Error",
  "Warning": "Warning",
  "Info": "Info",
  "Success": "Success",
  "Error 404": "Error 404",
  "We couldn't find what you were looking for. If you whish you can <a>Go Home</a>": "We couldn't find what you were looking for. If you whish you can <a>Go Home</a>",
  "Please login": "Please login",

  "Welcome to the <a>SpaceDev</a> <abbr>CRA</abbr> template": "Welcome to the <a>SpaceDev</a> <abbr>CRA</abbr> template",
  "Language": "Language",
  "Settings": "Settings",
  "Text": "Text",
  "Heading {level}": "Heading {level}",
  "Paragraph <strong>Paragraph</strong> <small>Paragraph</small>": "Paragraph <strong>Paragraph</strong> <small>Paragraph</small>",
  "Label <strong>Label</strong> <small>Label</small>": "Label <strong>Label</strong> <small>Label</small>",
  "Buttons": "Buttons",
  "{variant} button": "{variant} button",
  "Standard Buttons": "Standard Buttons",
  "Design System": "Design System",
  "Login Example": "Login Example",
  "Email Address": "Email Address",
  "Password": "Password",
  "Required field": "Required field",
  "Must be a valid email": "Must be a valid email",
  "Must be at least 8 charactes long": "Must be at least 8 charactes long",
  "Login": "Login",
  "Logout": "Logout",
  "Connect wallet": "Connect wallet",
  "Disconnect": "Disconnect",
  "Welcome {userName}": "Welcome {userName}",
  "Any email will do": "Any email will do",
  "Any text with at least 8 characters will do": "Any text with at least 8 characters will do",
  "Home": "Home",
  "Catalog": "Catalog",
  "Default Browser Elements": "Default Browser Elements",
  "Material Design Elements": "Material Design Elements",
  "Light Theme": "Light Theme",
  "Dark Theme": "Dark Theme",
  "Theme": "Theme",
  "Select": "Select",
  "Option {index}": "Option {index}",
  "Options": "Options",
  "Color": "Color",
  "Variant": "Variant",
  "State": "State",
  "Icons": "Icons",
  "Making Requests": "Making Requests",
  "As part of this page's load we make a request to a mockup endpoint.": "As part of this page's load we make a request to a mockup endpoint.",
  "In order to make sure the response data fulfill the expectations we have about its structure and typing we use a response validator.": "In order to make sure the response data fulfill the expectations we have about its structure and typing we use a response validator.",
  "This is how a request looks like:": "This is how a request looks like:",
  "<strong>User</strong> DTO:": "<strong>User</strong> DTO:",
  "If you open the console you should see something like this:": "If you open the console you should see something like this:",
  "Harmony": "Harmony",
  "Arbitrum One": "Arbitrum One",
  "Account connected: {account}": "Account connected: {account}",
  "Chain id: {chainId}": "Chain id: {chainId}",
  "None": "None",
  "Change network": "Change network",
  "Blockchain": "Blockchain",
  "Metamask": "Metamask",
  "Wallet Connect": "Wallet Connect",
  "Coinbase Wallet": "Coinbase Wallet",
  "Wrong Network": "Wrong Network",
  "Type something": "Type something",
  "Type a number": "Type a number",
  "Inputs": "Inputs",
  "All inputs will return the same value type as they receive.": "All inputs will return the same value type as they receive.",
  "The <code><TextInput /></code> component will take any <code>string</code> value.": "The <code><TextInput /></code> component will take any <code>string</code> value.",
  "The <code><NumberInput /></code> component will take any <code>number</code> or <code>''</code> as its value.": "The <code><NumberInput /></code> component will take any <code>number</code> or <code>\"\"</code> as its value.",
  "The <code><Select /></code> component will take any type as an option's type, and return the same value type.": "The <code><Select /></code> component will take any type as an option's type, and return the same value type.",
  "The prop <code>invert</code> is usefull when the background is collored and doesn't react with the theme mode changes.": "The prop <code>invert</code> is usefull when the background is collored and doesn't react with the theme mode changes.",
  "No date selected": "No date selected",
  "The <code><DateTimeInput /></code>, <code><DateInput /></code> and <code><TimeInput /></code> components will take any <code>Date</code> as their value.": "The <code><DateTimeInput /></code>, <code><DateInput /></code> and <code><TimeInput /></code> components will take any <code>Date</code> as their value.",
  "The date display above is localized and will react to the locale being updated on the app.": "The date display above is localized and will react to the locale being updated on the app.",
  "Connect Wallet": "Connect Wallet",
  "The <code><RadioGroup /></code> component will take any type as an option's type, and return the same value type.": "The <code><RadioGroup /></code> component will take any type as an option's type, and return the same value type.",
  "The <code><Checkbox /></code> component allows for the selection of a simple boolean value.": "The <code><Checkbox /></code> component allows for the selection of a simple boolean value.",
  "Custom Example": "Custom Example",
  "This field is required": "This field is required",
  "Submit": "Submit",
  "Pick an option": "Pick an option",
  "Intro": "Intro",
  "What is State?": "What is State?",
  "We indentified 3 different types or levels of state.": "We indentified 3 different types or levels of state.",
  "Global State": "Global State",
  "Accessible throughout the whole app.": "Accessible throughout the whole app.",
  "Reserved for data that we want to fetch as little as possible. e.g.: authenticated user's data, app theme, etc.": "Reserved for data that we want to fetch as little as possible. e.g.: authenticated user's data, app theme, etc.",
  "Handled by default with <a>Redux,https://redux.js.org</a> and <a>Redux-Toolkit,https://redux-toolkit.js.org</a>.": "Handled by default with <a>Redux,https://redux.js.org</a> and <a>Redux-Toolkit,https://redux-toolkit.js.org</a>.",
  "Scoped State": "Scoped State",
  "Available only to a selected branch of the app's tree and positioned on the upper common node to all served child nodes.": "Available only to a selected branch of the app's tree and positioned on the upper common node to all served child nodes.",
  "This pattern should be avoided for data that updates too frequently.": "This pattern should be avoided for data that updates too frequently.",
  "Handled with <a>React Context API,https://reactjs.org/docs/context.html</a>.": "Handled with <a>React Context API,https://reactjs.org/docs/context.html</a>.",
  "Component State": "Component State",
  "Located on the component level.": "Located on the component level.",
  "Handled with the <code>useState</code> hook.": "Handled with the <code>useState</code> hook.",
  "The <i>state</i> is the business-related data.": "The <i>state</i> is the business-related data.",
  "No error handling.": "No error handling.",
  "The Humble Counter": "The Humble Counter",
  "Submiting the following form will update the counter value globally and the value will be reflected here: ": "Submiting the following form will update the counter value globally and the value will be reflected here: ",
  "No UI related data (the app theme is an exception here, for now).": "No UI related data (the app theme is an exception here, for now).",
  "No fetching logic.": "No fetching logic.",
  "Reserved for data that has to be accessed on different nesting levels, but is not needed app-wide.": "Reserved for data that has to be accessed on different nesting levels, but is not needed app-wide.",
  "Global Counter": "Global Counter",
  "<strong>Note:</strong> there is no hard limit in which we know to stop doing prop drilling and start using a Context, every developer will have to use it's own criteria at this point.": "<strong>Note:</strong> there is no hard limit in which we know to stop doing prop drilling and start using a Context, every developer will have to use it's own criteria at this point.",
  "Provider Name:": "Provider Name:",
  "First Level": "First Level",
  "Second Level": "Second Level",
  "Third Level": "Third Level",
  "Nesting Contexts": "Nesting Contexts",
  "Using a Context means that the Context API will do a lookup up the component's tree and use the first one available.": "Using a Context means that the Context API will do a lookup up the component's tree and use the first one available.",
  "This means that we can nest providers and by doing that change the Context its children will use, even if up the component's tree we have already placed another Provider.": "This means that we can nest providers and by doing that change the Context it's children will use, even if up the component's tree we have already placed another Provider.",
  "In the following example you will notice that, even though we use the same consumer component, each one will have different values, and the changes triggered on any given level will only affect such level.": "In the following example you will notice that, even though we use the same consumer component, each one will have different values, and the changes triggered on any given level will only affect such level."
}
